<pre class=metadata>
Title: Multi-Screen Window Placement
Shortname: multi-screen
Abstract: This document defines a web platform API that allows script to query the device for information about its screens, and additional APIs to place content on specific screens.
Status: CG-DRAFT
URL: https://webscreens.github.io/window-placement
Level: 1
Editor: Victor Costan, Google Inc. https://google.com, costan@google.com
Editor: Joshua Bell, Google Inc. https://google.com, jsbell@google.com
Editor: Mike Wasserman, Google Inc. https://google.com, msw@google.com
Repository: webscreens/window-placement
Group: secondscreencg
Test Suite: https://github.com/web-platform-tests/wpt/tree/master/screen_enumeration
Logo: logo.svg
Favicon: logo.svg
Complain About: accidental-2119 yes, missing-example-ids yes
Markup Shorthands: css no, markdown yes
Assume Explicit For: yes
</pre>

<style>
.domintro::before {
    content: 'For web developers (non-normative)';
    text-transform: initial;
}
.domintro dt {
    font-family: Menlo, Consolas, "DejaVu Sans Mono", Monaco, monospace;

    padding-top: 0.5em;
    padding-bottom: 1em;
}
.domintro dt a {
    color: inherit; border-bottom-style: none;
}
.domintro dt code {
    font-size: inherit;
}
</style>

<pre class=anchors>
spec: css-values-4; urlPrefix: https://drafts.csswg.org/css-values-4/
    type: dfn; text: CSS pixel; url: px
spec: fingerprinting-guidance; urlPrefix: https://www.w3.org/TR/fingerprinting-guidance/
    type: dfn; text: passive fingerprinting; url: dfn-passive-fingerprinting
    type: dfn; text: active fingerprinting; url: dfn-active-fingerprinting
    type: dfn; text: cookie-like fingerprinting; url: dfn-cookie-like-fingerprinting
</pre>

<!-- ====================================================================== -->
# Introduction # {#introduction}
<!-- ====================================================================== -->

*This section is non-normative.*

Operating systems generally allow users to connect multiple screens to a single device and arrange them virtually to extend the overall visual workspace.

A variety of applications use platform tools to place windows in such multi-screen environments, but web application developers are limited by existing APIs, which were generally designed around the use of a single screen.

As multi-screen devices and applications become a more common and critical part of user experiences, it becomes more important to give web developers information and tools to leverage that expanded visual environment.

This document extends existing {{Window}}, {{Screen}}, and {{FullscreenOptions}} concepts, and offers new {{ScreenDetails}} and {{ScreenDetailed}} interfaces to place content on specific screens.

<!-- ====================================================================== -->
## Motivating Use Cases ## {#motivations}
<!-- ====================================================================== -->

The aim of this specification is enable better experiences for web application users with multiple screens. Here are some use cases that inform the design:

* Slideshow app presents on a projector, shows speaker notes on a laptop screen.
* Financial app opens a dashboard of windows across multiple monitors.
* Medical app opens images (e.g. x-rays) on a high-resolution grayscale display.
* Creativity app shows secondary windows (e.g. palette) on a separate screen.
* Conference room app shows controls on a touch screen device and video on a TV.
* Multi-screen layouts in gaming, signage, artistic, and other types of apps.
* Site optimizes content and layout when a window spans multiple screens.

<!-- ====================================================================== -->
## Usage Overview ## {#usage-overview}
<!-- ====================================================================== -->

To support multi-screen experiences, the API allows web applications to:

1. Detect if the device has more than one screen
1. Request information required to place content on specific screens
1. Detect when a screen is added or removed
1. Detect when the current screen or an attribute thereof changes
1. Show an element fullscreen on a specific screen
1. Place a window on a specific screen

<aside class=example>

A basic example of the API usage is as follows:

```js
// Detect if the device has more than one screen.
if (window.screen.isExtended) {
  // Request information required to place content on specific screens.
  const screenDetails = await window.getScreenDetails();

  // Detect when a screen is added or removed.
  screenDetails.addEventListener('screenschange', onScreensChange);

  // Detect when the current {{ScreenDetailed}} or an attribute thereof changes.
  screenDetails.addEventListener('currentscreenchange', onCurrentScreenChange);

  // Find the primary screen, show some content fullscreen there.
  const primaryScreen = screenDetails.screens.find(s => s.isPrimary);
  document.documentElement.requestFullscreen({screen : primaryScreen});

  // Find a different screen, fill its available area with a new window.
  const otherScreen = screenDetails.screens.find(s => s !== primaryScreen);
  window.open(url, '_blank', \`left=${otherScreen.availLeft},\` +
                             \`top=${otherScreen.availTop},\` +
                             \`width=${otherScreen.availWidth},\` +
                             \`height=${otherScreen.availHeight}\`);
} else {
  // Detect when the current {{Screen}} or an attribute thereof changes.
  window.screen.addEventListener('change', onScreenChange);

  // Arrange content within the traditional single-screen environment...
}
```

</aside>

<!-- ====================================================================== -->
### Detecting the presence of multiple screens ### {#usage-overview-extended}
<!-- ====================================================================== -->

A principal question for supporting multi-screen experiences is whether the device has multiple screens that may be used when placing content. This is provided by the {{Screen/isExtended}} boolean, exposed to secure contexts without a permission prompt.

```js
if (screen.isExtended) {
  // Offer multi-screen controls for the user.
}
```

<!-- ====================================================================== -->
### Detecting when {{Screen}} attributes change ### {#usage-overview-property-changes}
<!-- ====================================================================== -->

Observing {{Screen}} attribute changes is useful for adapting content, even on single-screen devices. Further, observing {{Screen/isExtended}} is useful for detecting transitions between single-screen and multi-screen configurations. To avoid polling, {{Screen/change}} events are fired at the {{Screen}} object:

```js
screen.addEventListener('change') e => {
  // The window's current screen or an attribute thereof has changed.
});
```

<!-- ====================================================================== -->
### Requesting extended screen information ### {#usage-overview-screen-information}
<!-- ====================================================================== -->

After determining that the device has multiple screens, information can be requested about them using the {{Window/getScreenDetails()}} method. This method may prompt the user for permission. The resulting {{ScreenDetailed}} object lets developers enumerate screens, inspect screen attributes, and listen for changes.

```js
try {
  // Request screen details and process the information immediately.
  const screenDetails = await window.getScreenDetails();
  processScreenDetails(screenDetails);

  // Process updated screen details when the set of screens change.
  screenDetails.onscreenschange = () => {
    processScreenDetails(screenDetails);
  };
} catch () {
  // Handle denied permission and other errors.
}

function processScreenDetails(screenDetails) {
  // Build a UI listing screens, using assumed helpers.
  clearScreenList();
  screenDetails.screens.forEach(screen => {
    addToScreenList({name: screen.label, screen: screen});
  });
  selectCurrentInScreenList(screenDetails.currentScreen);
}
```

<!-- ====================================================================== -->
### Showing elements fullscreen on a specific screen ### {#usage-overview-fullscreen-on-specific-screen}
<!-- ====================================================================== -->

A common multi-screen use case is to present some content fullscreen on a specific screen. The screen may be selected interactively, or automatically selected based on prior user selections or screen attributes. A screen, once selected, can be passed to the {{Element/requestFullscreen()}} method.

```js
// Call an assumed helper that returns a selected ScreenDetailed instance.
const screenDetailed = getScreenForSlideshow();

// Request that a particular element be shown fullscreen on the selected screen.
slideshowElement.requestFullscreen({ screen: screenDetailed });
```

<!-- ====================================================================== -->
### Placing windows on a specific screen ### {#usage-overview-place-windows-on-specific-screen}
<!-- ====================================================================== -->

Another common multi-screen use cases is to place a window on a specific screen. This can be accomplished by using coordinates provided in the {{ScreenDetailed}} interface with existing {{Window/open()}} and {{Window/moveTo()}} methods.

```js
function openCenteredWindow(url, screen, w, h) {
  // Compute coordinates relative to the target screen's coordinates.
  const l = screen.availLeft + Math.round(screen.availWidth - width) / 2;
  const t = screen.availTop + Math.round(screen.availHeight - height) / 2;

  // Open the window with the requested dimensions.
  return window.open(url, '_blank', \`left=${l},top=${t},width=${w},height=${h}\`);
}
```

<!-- ====================================================================== -->
# Concepts # {#concepts}
<!-- ====================================================================== -->

Concepts in this specification build upon those in [[CSSOM-View]], the latest [CSSOM-View Editor's draft](https://drafts.csswg.org/cssom-view/), [[HTML]], and [[Fullscreen]].

<!-- ====================================================================== -->
## Screen ## {#concept-screen}
<!-- ====================================================================== -->

A device hosting the user agent has a single <dfn>screen</dfn> or multiple [=/screens=], which are used to display visual content. The set of [=/screens=] used by a device may change while a user agent is running, reflecting changes in the hardware or software configutation of the device.

Note: Some basic examples of screen configuration change include connecting a television or projector to a laptop with an HDMI cable, closing the lid of a laptop to disable its built-in LCD panel, and changing the display resolution of a connected LCD computer monitor.

<div dfn-for="screen">

A [=/screen=] has a <dfn>color depth</dfn>, which is the [=pixel/color depth=] of the screen's pixels.

<div algorithm>

A [=/screen=] has a <dfn>device pixel ratio</dfn>, similar to {{Window}}'s {{Window/devicePixelRatio}}, which is the result of the following algorithm:

1. Let |CSS pixel size| be the size of a [=/CSS pixel=].

1. Let |device pixel size| be the vertical size of a [=/screen pixel=].

1. Return the result of dividing |CSS pixel size| by |device pixel size|.

</div>

A [=/screen=] has an <dfn>orientation</dfn>, which is described in [[screen-orientation]].

A [=/screen=] has a <dfn>label</dfn>, which is a string that meaningfully describes the screen to a user.

Note: The [=screen/label=] can be an arbitrary string selected by the user agent. It could describe the screen relative to the device, e.g. `"internal"` vs. `"external"`, it could include the dimensions, e.g. `"640x480"`, it could include a distinguishing number, e.g. `"screen 1"` vs. `"screen 2"`, or all of the preceeding.

Advisement: While many screen atrtibutes could be used for [=/active fingerprinting=], the strings used as [=screen/labels=] in particular should be considered carefully to minimize the uniqueness. For example, it would be a poor choice to include the serial number of the device.

</div>

<!-- ====================================================================== -->
### Screen pixel ### {#concept-screen-pixel}
<!-- ====================================================================== -->

<div dfn-for="screen">

A [=/screen=] has <dfn>pixels</dfn>, which are the smallest screen components that can be programmed directly. Each pixel shows one color.

Note: On a liquid-crystal display (LCD), each pixel is made up of three components. Each component is a (red, green, blue) light with variable intensity. Reasoning about pixel components (subpixel rendering) is out of scope for this specification.

A [=/pixel=] has a <dfn for=pixel>color depth</dfn>, which is the number of bits used to represent the colors it can display.

Note: Some popular rendering systems model [=pixels=] as having a [=pixel/color depth=] of 24. These 3 groups of 8 bits represent the intensity of the (red, green, blue) subpixels of an LCD [=pixel=].

</div>

<!-- ====================================================================== -->
### Screen area ### {#concept-screen-area}
<!-- ====================================================================== -->

<div dfn-for="screen">

A [=/screen=] has a <dfn>screen area</dfn>, which is a rectangular two-dimensional grid of [=/screen pixels=], used to present visual content from the operating system and client applications to the user. This equates to the [=/Web-exposed screen area=] of a particular [=/screen=].

A [=/screen area=] has a <dfn>width</dfn>, which is the number of [=/screen pixels=] along the horizontal dimension of the [=/screen area=]'s rectangular pixel grid.

A [=/screen area=] has a <dfn>height</dfn>, which is the number of [=/screen pixels=] along the vertical dimension of the [=/screen area=]'s rectangular pixel grid.

</div>

Note: The grid size is usually expressed as [=screen/width=] x [=screen/height=]. For example, a 1920x1080 screen area has a grid with a [=screen/width=] of 1920 pixels and a [=screen/height=] of 1080 pixels.

Note: As specified in [[CSSOM-VIEW#web-exposed-screen-information]], user agents may choose to hide information about the screen of the output device, in order to protect the user’s privacy. In this case, the screen area 

<!-- ====================================================================== -->
### Available screen area ### {#concept-available-screen-area}
<!-- ====================================================================== -->

<div dfn-for="screen">

A [=/screen=] has an <dfn>available screen area</dfn>, which is a rectangular subset of the [=/screen area=] where the operating system permits web application window placements. The rectangle's edges are parallel to the [=/screen area=] edges.This region does not include any portions of the [=/screen area=] that are reserved by the operating system for its own user interface elements, such as taskbars and menu bars. This equates to the [=/Web-exposed available screen area=] of a particular [=/screen=].

The <dfn>available width</dfn> of a [=/screen=] is the number of [=/screen pixels=] along the horizontal dimension of the [=/available screen area=]'s rectangular pixel grid.

The <dfn>available height</dfn> of a [=/screen=] is the number of [=/screen pixels=] along the vertical dimension of the [=/available screen area=]'s rectangular pixel grid.

</div>

<!-- ====================================================================== -->
### Virtual screen area ### {#concept-virtual-screen-area}
<!-- ====================================================================== -->

A device has a two-dimensional <dfn>virtual screen area</dfn> that extends in all directions. It has x- and y-coordinates that increase rightwards and downwards respectively from the <dfn>multi-screen origin</dfn>. The [=/multi-screen origin=] is an implementation-defined point that defines the (0, 0) coordinate of the [=/virtual screen area=].

A common convention is to set the [=/multi-screen origin=] to the top-left of the [=/primary=] [=/screen=], but can be any arbitrary point within the [=/virtual screen area=]. Every [=/screen=]'s [=/screen area=] is a view onto a rectangular subset of the [=/virtual screen area=].

This diagram shows some examples of how multiple [=/screens=] might be arranged within a [=/virtual screen area=], along with some potential [=/multi-screen origins=]:

<img src="multi_screen_origin.svg" alt="Diagram showing various examples of screens and multi-screen origins">

<!-- ====================================================================== -->
### Screen position ### {#concept-screen-position}
<!-- ====================================================================== -->

A [=/screen=] has a <dfn for="screen">screen position</dfn> which is the [=/screen area=]'s (x, y)-coordinates in the [=/virtual screen area=] relative to the [=/multi-screen origin=]. Coordinates may be negative, and are typically expressed as (<var ignore>x</var>, <var ignore>y</var>).

<!-- ====================================================================== -->
### Available screen position ### {#concept-available-screen-position}
<!-- ====================================================================== -->

A [=/screen=] has an <dfn for="screen">available screen position</dfn> which is the [=/available screen area=]'s (x, y)-coordinates in the [=/virtual screen area=] relative to the [=/multi-screen origin=]. Coordinates may be negative, and are typically expressed as (<var ignore>x</var>, <var ignore>y</var>).

<!-- ====================================================================== -->
## Primary screen ## {#concept-primary-screen}
<!-- ====================================================================== -->

The device hosting the user agent has exactly one <dfn>primary</dfn> [=/screen=]. All the other [=/screens=] are considered <dfn>secondary</dfn>.

Note: The primary screen typically hosts the operating system's user interface for task management, such as the Windows task bar and the macOS Dock.

A [=/screen=]'s designation as [=primary=] or [=secondary=] may change while the user agent is running.

The <dfn>primary screen</dfn> is the [=/screen=] that is currently [=/primary=].

Note: Most operating systems let the user choose the primary screen using a management user interface, such as the Windows Control Panel and the macOS Preferences application.

By convention, the [=/primary screen=]'s [=screen/screen position=] is (0,0).

Note: As an example, consider a device with three 1920x1080 screens arranged horizontally. If the middle screen is the [=/primary screen=], then the left screen's [=screen/screen position=] (-1920,0). The middle screen's [=screen/screen position=] (0,0). The right screen's [=screen/screen position=] is (3840,0).

<!-- ====================================================================== -->
## Internal screen ## {#concept-internal-screen}
<!-- ====================================================================== -->

Each [=/screen=] may be designated as <dfn>internal</dfn> or <dfn>external</dfn>.

[=External=] screens are manufactured separately from the devices they are connected to. It is not unusual for an [=external=] screen to be disconnected from one device and connected to a different device.

[=Internal=] screens are usually attached to a device at manufacturing time. [=Internal=] screens are not intended to be detached by users. However an [=internal=] [=/screen=] may still be enabled or disabled while the user agent is running.

Note: As an example, a laptop might disable its [=internal=] screen and input device when the lid is closed. The laptop may still be used in this configuration with an [=external=] screen and input device. The disabled [=internal=] screen may not be reported as a [=/screen=] used by the device while the lid is closed.

<!-- ====================================================================== -->
## Current screen ## {#concept-current-screen}
<!-- ====================================================================== -->

Scripts executing in a {{Window}} context can access the {{Window/screen}} property. This {{Screen}} object reflects the properties of the <dfn>current screen</dfn>, which is a [=/screen=] that presents the window.

Note: On many operating systems, a window can be presented across multiple screens with different properties, or can be in a "hidden" state and not presented on any screen. Operating systems and user agents are assumed to define a canonical screen for a given {{Window}}, for example the screen with the largest intersection area with the window.

<!-- ====================================================================== -->
### Observable properties ### {#concept-observable-properties}
<!-- ====================================================================== -->

The <dfn for="screen">basic observable properties</dfn> of a [=/screen=] are:

* The [=screen/width=] and [=screen/height=] of the [=screen/screen area=]
* The [=screen/available width=] and [=screen/available height=] of the [=screen/available screen area=]
* [=screen/color depth=]
* [=screen/orientation=]

The <dfn for="screen">advanced observable properties</dfn> of a [=/screen=] are:

* [=screen/screen position=]
* [=screen/available screen position=]
* [=screen/device pixel ratio=]
* [=screen/label=]
* The [=screen=]'s desgination as [=primary=] or [=secondary=]
* The [=screen=]'s desgination as [=internal=] or [=external=]

<!-- ====================================================================== -->
# API # {#api}
<!-- ====================================================================== -->

<!-- ====================================================================== -->
## Extensions to the {{Screen}} interface ## {#api-extensions-to-screen}
<!-- ====================================================================== -->

The [[CSSOM-VIEW|CSSOM View Module]] specification defines the {{Screen}} interface, which this specification extends:

<xmp class=idl>
partial interface Screen /* : EventTarget */ {
  [SecureContext]
  readonly attribute boolean isExtended;

  [SecureContext]
  attribute EventHandler onchange;
};
</xmp>

Issue: {{Screen}} needs to derive from {{EventTarget}}. This will require changes to [[CSSOM-VIEW#the-screen-interface]].

<!-- ====================================================================== -->
### {{Screen/isExtended}} attribute ### {#api-screen-isExtended-attribute}
<!-- ====================================================================== -->

<div class="domintro note">

    : window . screen . {{Screen/isExtended}}

    :: Returns `true` if the device's display is extended across multiple screens.

</div>

<div algorithm>

The <dfn attribute for=Screen>isExtended</dfn> getter steps are:

1. Return true if the device has more than one [=/screen=], and false otherwise.

</div>

<!-- ====================================================================== -->
### {{Screen/onchange}} attribute ### {#api-screen-onchange-attribute}
<!-- ====================================================================== -->

<div class="domintro note">

    : window . screen . {{Screen/onchange}}

    :: Fired when the window's screen or attributes thereof change.

</div>

The <dfn attribute for=Screen>onchange</dfn> attribute is an [=/event handler IDL attribute=] whose [=/event handler event type=] is <a event for=Screen>`change`</a>.

When any [=screen/basic observable property=] of a {{Window}}'s [=/current screen=] changes, [=/fire an event=] with type <dfn event for=Screen>`change`</dfn> at the {{Window}}'s associated {{Screen}} object.

<!-- ====================================================================== -->
## Extensions to the {{Window}} interface ## {#api-extensions-to-window}
<!-- ====================================================================== -->

The [[HTML]] standard defines the {{Window}} interface, which this specification extends:

<!-- ====================================================================== -->
## {{Window/getScreenDetails()}} method ## {#api-window-getScreenDetails-method}
<!-- ====================================================================== -->

<div class="domintro note">

    : await window . {{Window/getScreenDetails()}}

    :: Returns a promise that fulfills with a {{ScreenDetails}} object with information about all screens. The promise will be rejected if permission is denied.

</div>

<xmp class=idl>
partial interface Window {
  [SecureContext]
  Promise<ScreenDetails> getScreenDetails();
};
</xmp>

Each {{Window}} object has an associated {{ScreenDetails}} object.

Each {{Window}} object also has an associated {{ScreenDetailed}} object which reflects the properties of the window's [=/current screen=].

<div algorithm>

The <dfn method for=Window>getScreenDetails()</dfn> method steps are:

1. Let |promise| be [=/a new promise=].

1. Run the following steps [=/in parallel=]:

    1. Let |permissionState| be [=/request permission to use=] `"window-placement"`.

    1. If |permissionState| is "{{PermissionState/denied}}" then [=/reject=] |promise| with a {{"NotAllowedError"}} {{DOMException}} and abort these steps.

    1. [=/Resolve=] |promise| with [=/this=]'s associated {{ScreenDetails}} object.

1. Return |promise|.

</div>

In addition to the partial interface additions defined above, the {{Window}} interface described in [[CSSOM-VIEW#extensions-to-the-window-interface]] are modified:

* The {{Window/screenX}} and {{Window/screenLeft}} attributes must return the x-coordinate, relative to the top left corner of the [=/primary screen=]'s Web-exposed screen area, of the left of the client window as number of [=/CSS pixels=], or zero if there is no such thing.
* The {{Window/screenY}} and {{Window/screenTop}} attributes must return the y-coordinate, relative to the top left corner of the of the [=/primary screen=]'s Web-exposed screen area, of the top of the client window as number of [=/CSS pixels=], or zero if there is no such thing.
* The {{Window/moveTo()}} steps move the target window relative to the top left corner of the [=/primary screen=]'s Web-exposed screen area.
* Handling of `"left"` and `"top"` for {{Window/open()}} move the target window relative to the top or left edge (respectively) of the [=/primary screen=]'s Web-exposed screen area.

Issue: Merge the above with [[CSSOM-VIEW#extensions-to-the-window-interface]].

<!-- ====================================================================== -->
## The {{ScreenDetails}} interface ## {#api-screendetails-interface}
<!-- ====================================================================== -->

<div class="domintro note">

    : |screenDetails| . {{ScreenDetails/screens}}
    :: Returns an array of {{ScreenDetailed}} objects that describe each of the screens.

    : |screenDetails| . {{ScreenDetails/currentScreen}}
    :: Returns a {{ScreenDetailed}} object that describes the current screen. This object describes the same object that the {{Window/screen}} property of {{Window}} describes, but provides a superset of the information.

</div>

<xmp class=idl>
[Exposed=Window, SecureContext]
interface ScreenDetails {
  readonly attribute FrozenArray<ScreenDetailed> screens;

  readonly attribute ScreenDetailed currentScreen;

  attribute EventHandler onscreenschange;
  attribute EventHandler oncurrentscreenchange;
};
</xmp>

<div algorithm>

The <dfn attribute for=ScreenDetails>screens</dfn> getter steps are:

1. Let |screens| be a new [=/list=].

1. For each |screen| of [=/screens=]:

    1. Let |a| be the {{ScreenDetailed}} object describing |screen|.

    1. [=list/Append=] |a| to |screens|.

1. Return the result of [=list/sorting=] |screens| in ascending order with the [=/screen ordering=] algorithm.

</div>


<div algorithm>

The <dfn>screen ordering</dfn> algorithm defines a [=/screen=] |a| as less than a [=/screen=] |b| if the following steps return true:

1. If |a|'s [=screen/screen position=] x-coordinate is less than |b|'s [=screen/screen position=] x-coordinate, then return true.
1. If |b|'s [=screen/screen position=] x-coordinate is less than |a|'s [=screen/screen position=] x-coordinate, then return false.
1. If |a|'s [=screen/screen position=] y-coordinate is less than |b|'s [=screen/screen position=] y-coordinate, then return true.
1. Otherwise, return false.

</div>

The <dfn attribute for=ScreenDetails>currentScreen</dfn> getter steps are to return the {{ScreenDetailed}} object representing the current screen of the {{Window}} object associated with [=/this=].

Issue: define the getter steps explicitl, using internal slots to hold the exact object instances which should be returned by each accessor's getter steps. See https://github.com/webscreens/window-placement/issues/81 and https://webbluetoothcg.github.io/web-bluetooth/#bluetoothdevice-interface

Note: The {{ScreenDetails/currentScreen}} is not marked [SameObject], in order to allow comparisons with objects in {{ScreenDetails/screens}}, e.g. `screenDetails.screens.find(s => s !== screenDetails.currentScreen);`

<!-- ====================================================================== -->
### {{ScreenDetails}} events ### {#api-screendetails-events}
<!-- ====================================================================== -->

The <dfn attribute for=ScreenDetails>onscreenschange</dfn> attribute is an [=/event handler IDL attribute=] whose [=/event handler event type=] is <a event for=ScreenDetails>`screenschange`</a>.

The <dfn attribute for=ScreenDetails>oncurrentscreenchange</dfn> attribute is an [=/event handler IDL attribute=] whose [=/event handler event type=] is <a event for=ScreenDetails>`currentscreenchange`</a>.

When the set of [=/screens=] changes, [=/fire an event=] with type <dfn event for=ScreenDetails>`screenschange`</dfn> at every {{ScreenDetails}} object.

When the [=/current screen=] of a {{Window}} changes from one [=/screen=] to another (e.g. the {{Window}} has been moved to a different display), [=/fire an event=] with type <dfn event for=ScreenDetails>`currentscreenchange`</dfn> at the {{Window}}'s associated {{ScreenDetails}} object.

<!-- ====================================================================== -->
## The {{ScreenDetailed}} interface ## {#api-screenadvanced-interface}
<!-- ====================================================================== -->

A {{ScreenDetailed}} object represents a [=/screen=].

<div class="domintro note">

  : |screenDetailed| . {{ScreenDetailed/availLeft}}
  :: Returns the distance from the left edge of the primary screen to the left edge of the available screen area.

  : |screenDetailed| . {{ScreenDetailed/availTop}}
  :: Returns the distance from the top edge of the primary screen to the top edge of the available screen area.

  : |screenDetailed| . {{ScreenDetailed/left}}
  :: Returns the distance from the left edge of the primary screen to the left edge of the screen area.

  : |screenDetailed| . {{ScreenDetailed/top}}
  :: Returns the distance from the top edge of the primary screen to the top edge of the screen area.

  : |screenDetailed| . {{ScreenDetailed/isPrimary}}
  :: Returns whether this screen is designated as the 'primary' screen by the OS (otherwise it is a 'secondary' screen).

  : |screenDetailed| . {{ScreenDetailed/isInternal}}
  :: Returns whether this screen is an 'internal' panel built into the device, like a laptop display (otherwise it is 'external', like a wired monitor).

  : |screenDetailed| . {{ScreenDetailed/devicePixelRatio}}
  :: Returns the ratio between physical and logical pixels.

  : |screenDetailed| . {{ScreenDetailed/label}}
  :: A user-friendly label for the screen, determined by the user agent and OS.

</div>

<xmp class=idl>
[Exposed=Window, SecureContext]
interface ScreenDetailed : Screen {
  readonly attribute long availLeft;
  readonly attribute long availTop;
  readonly attribute long left;
  readonly attribute long top;
  readonly attribute boolean isPrimary;
  readonly attribute boolean isInternal;
  readonly attribute float devicePixelRatio;
  readonly attribute DOMString label;
};
</xmp>

The <dfn attribute for=ScreenDetailed>availLeft</dfn> getter steps are to return [=/this=]'s [=screen/available screen position=]'s x-coordinate.

The <dfn attribute for=ScreenDetailed>availTop</dfn> getter steps are to return [=/this=]'s [=screen/available screen position=]'s y-coordinate.

The <dfn attribute for=ScreenDetailed>left</dfn> getter steps are to return [=/this=]'s [=screen/screen position=]'s x-coordinate.

The <dfn attribute for=ScreenDetailed>top</dfn> getter steps are to return [=/this=]'s [=screen/screen position=]'s y-coordinate.

The <dfn attribute for=ScreenDetailed>isPrimary</dfn> getter steps are to return true if [=/this=] is the [=/primary screen=], or false otherwise.

The <dfn attribute for=ScreenDetailed>isInternal</dfn> getter steps are to return true if [=/this=] is [=/internal=], or false otherwise.

The <dfn attribute for=ScreenDetailed>devicePixelRatio</dfn> getter steps are to return [=/this=]'s [=screen/device pixel ratio=].

The <dfn attribute for=ScreenDetailed>label</dfn> getter steps are to return [=/this=]'s [=screen/label=].

<!-- ====================================================================== -->
### {{ScreenDetailed}} events ### {#api-screenadvanced-events}
<!-- ====================================================================== -->

When any attribute [=screen/basic observable property=] or [=screen/advanced observable property=] of a {{ScreenDetailed}}'s associated [=/screen=] changes, [=/fire an event=] with type <dfn event for=ScreenDetailed>`change`</dfn> at the {{ScreenDetailed}} object.

<!-- ====================================================================== -->
## Extensions to {{FullscreenOptions}} ## {#api-extensions-to-fullscreen-options}
<!-- ====================================================================== -->

<xmp class=idl>
partial dictionary FullscreenOptions {
  // An optional way to request a specific screen for element fullscreen.
  ScreenDetailed screen;
};
</xmp>

Issue: Write me.

<!-- ====================================================================== -->
## Permissions ## {#api-permissions}
<!-- ====================================================================== -->

The Multi-Screen Window Placement API is a [=/default powerful feature=] that is identified by the [=powerful feature/name=] <dfn for=PermissionName export enum-value>"window-placement"</dfn>.

Issue: File bug against [[permissions]], to add to the registry.

Issue: Talk about permissions policy integration.
<!--
The Multi-Screen Window Placement API defines a [=/policy-controlled feature=] named "window-placement" which has a [=/default allowlist=] of `"self"`.
-->

<!-- ====================================================================== -->
# Security Considerations # {#security}
<!-- ====================================================================== -->

Issue: Write this section.

<!-- ====================================================================== -->
# Privacy Considerations # {#privacy}
<!-- ====================================================================== -->

Issue: Write this section.

<!-- ====================================================================== -->
# Accessibility Considerations # {#a11y}
<!-- ====================================================================== -->

Issue: Write this section.

<!-- ====================================================================== -->
# Internationalization Considerations # {#i18n}
<!-- ====================================================================== -->

Issue: Write this section.

<!-- ====================================================================== -->
# Acknowledgements # {#acknowledgements}
<!-- ====================================================================== -->

Many thanks to<!--
-->
Adrienne Walker,
Anssi Kostiainen,
Chris Terefinko,
Domenic Denicola,
Jonathan Garbee,
Kenneth Rohde Christiansen,
L. David Baron,
Lukasz Olejnik,
Marijn Kruisselbrink,
Matt Giuca,
Michael Ketting,
Michael Wasserman,
Nadav Sinai,
Peter Linss,
Staphany Park,
Theresa O'Connor,
Thomas Nattestad, and
Thomas Steiner
<!--
-->for helping craft this specification.

Issue: Ensure we didn't forget anyone!

Special thanks to Tab Atkins, Jr. for creating and maintaining [Bikeshed](https://github.com/tabatkins/bikeshed), the specification authoring tool used to create this document, and for his general authoring advice.
